# creates a new release for LIVE and PTU channel every day at 4am when the corresponding global.ini
# was changed in the last 24 hours
#
# steps:
# 1. checkout the code
# 2. count the commits for the global.ini in the last 24 hours
# 3. get the current date
# - the following steps are only run then the commit count is > 0
# 4. create a release name with the correct version in it
# 5. create the zip
# 6. create the release

on:
  schedule:
    - cron: "0 3 * * *"

name: Create Releases

jobs:
  get_context_info:
    runs-on: ubuntu-latest
    outputs:
      NEW_COMMIT_COUNT_LIVE: ${{steps.new_commits_live.outputs.NEW_COMMIT_COUNT_LIVE}}
      NEW_COMMIT_COUNT_PTU: ${{steps.new_commits_ptu.outputs.NEW_COMMIT_COUNT_PTU}}
      DATE: ${{steps.date.outputs.DATE}}
      RELEASE_TITLE_LIVE: ${{steps.title_live.outputs.RELEASE_TITLE_LIVE}}
      RELEASE_TITLE_PTU: ${{steps.title_ptu.outputs.RELEASE_TITLE_PTU}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get New Commits On LIVE # counts the commits to live/global.ini during the last 24 hours
        id: new_commits_live
        run: echo "NEW_COMMIT_COUNT_LIVE=$(git log --oneline --since '24 hours ago' -- live/global.ini | wc -l)" >> $GITHUB_OUTPUT

      - name: Get New Commits On PTU # counts the commits to ptu/global.ini during the last 24 hours
        id: new_commits_ptu
        run: echo "NEW_COMMIT_COUNT_PTU=$(git log --oneline --since '24 hours ago' -- ptu/global.ini | wc -l)" >> $GITHUB_OUTPUT

      - name: Get Current Date
        id: date
        run: echo "DATE=$(date '+%d.%m.%y')" >> $GITHUB_OUTPUT

      - name: Get Release Title For LIVE
        id: title_live # creates a title for the release that shows the version number used in the title of the last commit that changed the live/global.ini
        if: needs.get_context_info.outputs.NEW_COMMIT_COUNT_LIVE > 0
        run: echo "RELEASE_TITLE_LIVE=Star Citizen $(git log -1 --pretty=%s -- live/global.ini | cut -d'|' -f1 | rev | cut -c 2- | rev) [de]" >> $GITHUB_OUTPUT

      - name: Get Release Title For PTU
        id: title_ptu # creates a title for the release that shows the version number used in the title of the last commit that changed the ptu/global.ini
        if: needs.get_context_info.outputs.NEW_COMMIT_COUNT_PTU > 0
        run: echo "RELEASE_TITLE_PTU=Star Citizen $(git log -1 --pretty=%s -- ptu/global.ini | cut -d'|' -f1 | rev | cut -c 2- | rev) [de]" >> $GITHUB_OUTPUT

  live_release: # runs only when live/global.ini was changed in the last 24 hours
    name: Create Live Release
    runs-on: ubuntu-latest
    needs: get_context_info
    if: needs.get_context_info.outputs.NEW_COMMIT_COUNT_LIVE > 0
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release Zip For LIVE
        run: |
          sudo timedatectl set-timezone Europe/Berlin
          mkdir release
          cp "live/user.cfg" "release"
          mkdir -p "release/data/Localization/german_(germany)"
          cp "live/global.ini" "release/data/Localization/german_(germany)/"
          cd release
          echo "${{ vars.VERSION_FILE_TEXT_LIVE }} $(date '+%d.%m.%y - %H:%M Uhr')" >> Version.txt
          zip -r -9 "../${{ vars.ZIP_NAME_LIVE }}" *

      - name: Create New Release For LIVE
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.get_context_info.outputs.DATE }}-LIVE
          commit: main
          name: ${{ needs.get_context_info.outputs.RELEASE_TITLE_LIVE }}
          body: ${{ vars.RELEASE_BODY_LIVE }}
          artifacts: ${{ vars.ZIP_NAME_LIVE }}

  ptu_release: # runs only when ptu/global.ini was changed in the last 24 hours
    name: Create PTU Release
    runs-on: ubuntu-latest
    needs: [get_context_info, live_release]
    if: (vars.TRIGGER_PTU_RELEASE == 1 && needs.get_context_info.outputs.NEW_COMMIT_COUNT_PTU > 0)
    permissions:
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Create Release Zip For PTU
        run: |
          sudo timedatectl set-timezone Europe/Berlin
          mkdir release
          cp "ptu/user.cfg" "release"
          mkdir -p "release/data/Localization/german_(germany)"
          cp "ptu/global.ini" "release/data/Localization/german_(germany)/"
          cd release
          echo "${{ vars.VERSION_FILE_TEXT_PTU }} $(date '+%d.%m.%y - %H:%M Uhr')" >> Version.txt
          zip -r -9 "../${{ vars.ZIP_NAME_PTU }}" *

      - name: Create New Release For PTU
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.get_context_info.outputs.DATE }}-PTU
          commit: main
          name: ${{ needs.get_context_info.outputs.RELEASE_TITLE_PTU }}
          body: ${{ vars.RELEASE_BODY_PTU }}
          artifacts: ${{ vars.ZIP_NAME_PTU }}
          makeLatest: "latest"
